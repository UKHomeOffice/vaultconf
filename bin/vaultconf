#!/usr/bin/env ruby

require 'optparse'
require 'methadone'
require 'vaultconf.rb'
require 'kubernetes.rb'
require 'vault'
require 'highline/import'

class App
  include Methadone::Main
  include Methadone::CLILogging

  main do |action|

    server = options['a']
    user = options['u']
    password = options['p']
    config = options['c']
    configure_kubernetes = !options['nokube']

    if !server
      server = ENV['VAULT_ADDR']
    end
    
    if (!user || !password) && File.exist?("#{Dir.home}/.vaultconf/login")
      debug 'No username or password specified, retrieving details from config file'
      user, password = Vaultconf::Vaultconf.read_login_from_file
    elsif user && !password
      password = ask('Please enter your password: ') {|pw| pw.echo=false}
      puts ''
    end

    # Setup Vault singleton
    Vault.address = server
    Vault.auth.userpass(user, password)

    kube_service = Kubernetes::KubernetesService.new
    vault = Vaultconf::Vaultconf.new(Vault, kube_service)
    kube_controller = Kubernetes::KubernetesController.new(kube_service)

    if action == 'policies'
      vault.reconcile_policies_to_vault(config)
    elsif action == 'users'
      logins = vault.reconcile_users_to_vault(config, configure_kubernetes)
      if configure_kubernetes then kube_controller.add_logins_to_kubernetes(logins) end
    else
        Kernel.abort("Action must be either policies or users, you inputted #{action}")
    end
  end

  # supplemental methods here

  # Declare command-line interface here

  # description "one line description of your app"
  #
  # Accept flags via:
  # on("--flag VAL","Some flag")
  # options[flag] will contain VAL
  #
  # Specify switches via:
  # on("--[no-]switch","Some switch")
  #
  # Or, just call OptionParser methods on opts
  #
  # Require an argument
  # arg :some_arg
  #
  # # Make an argument optional
  # arg :optional_arg, :optional

  # Command line interface details
  description "Updates given vault server with specified policies and users"

  # TODO: Need a positional argument here for what action it is that the tool will be doing
  arg :action, "Action that you want to perform. Allowable values are \"users\" or \"policies\""
  on("-u VAL", "--user", "Specifies the user to use to create the new config in vault")
  on("-p VAL", "--password", "Specifies the password for the user who is creating the config in vault")
  on("-a VAL", "--address", "URL for the vault server. If no address is specified VAULT_ADDR environment variable will be used")
  on("--nokube", "Configure only Vault, don't touch kubernetes")
  on("-c VAL", "--config", "Specifies either the directory containing vault policies to be added, or the file containing users to be added")

  version Vaultconf::VERSION

  use_log_level_option :toggle_debug_on_signal => 'USR1'

  go!
end
