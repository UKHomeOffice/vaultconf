#!/usr/bin/env ruby

require 'optparse'
require 'methadone'
require 'vaultconf.rb'
require 'vault'

class App
  include Methadone::Main
  include Methadone::CLILogging

  main do |action|

    server = options['a']
    user = options['u']
    password = options['p']
    config = options['c']

    # Authenticate with credentials that are passed into the program, saving the token
    authtoken = Vaultconf.get_auth_token(user, password, server)

    # Setup Vault singleton
    Vault.address = server
    Vault.token = authtoken

    if action == 'policies'
      Vaultconf.add_policies_to_vault(Vault, config)
    elsif action == 'users'
      Vaultconf.add_users_to_vault(Vault, config)
    else
      Kernel.abort("Action must be either policies or users, you inputted #{action}")
    end

    # Open the yaml file pointed to in the users argument

    # Iterate through each of the users
    # Generate a password
    # Use vault to add the user with the policies associated with the user

  end

  # supplemental methods here

  # Declare command-line interface here

  # description "one line description of your app"
  #
  # Accept flags via:
  # on("--flag VAL","Some flag")
  # options[flag] will contain VAL
  #
  # Specify switches via:
  # on("--[no-]switch","Some switch")
  #
  # Or, just call OptionParser methods on opts
  #
  # Require an argument
  # arg :some_arg
  #
  # # Make an argument optional
  # arg :optional_arg, :optional

  # Command line interface details
  description "Updates given vault server with specified policies and users"

  # TODO: Need a positional argument here for what action it is that the tool will be doing
  arg :action, "Action that you want to perform. Allowable values are \"users\" or \"policies\""
  on("-u VAL", "--user", "Specifies the user to use to create the new config in vault")
  on("-p VAL", "--password", "Specifies the password for the user who is creating the config in vault")
  on("-a VAL", "--address", "URL for the vault server")
  on("-c VAL", "--config", "Specifies either the directory containing vault policies to be added, or the file containing users to be added")
  on("-v", "--verbose", "Verbose logging")

  version Vaultconf::VERSION

  use_log_level_option :toggle_debug_on_signal => 'USR1'

  go!
end
